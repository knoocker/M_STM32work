
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  ** This notice applies to any and all portions of this file
  * that are not between comment pairs USER CODE BEGIN and
  * USER CODE END. Other portions of this file, whether 
  * inserted by the user or by software development tools
  * are owned by their respective copyright owners.
  *
  * COPYRIGHT(c) 2018 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "stm32f0xx_hal.h"

/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim14;

PCD_HandleTypeDef hpcd_USB_FS;

/* USER CODE BEGIN PV */
/* Private variables ---------------------------------------------------------*/
enum stany_programu
{
	oczekiwanie,
	silownik_gora,
	silownik_dol
};

volatile enum stany_programu stan = oczekiwanie;
volatile uint8_t przycisk_flag = 0;

volatile uint8_t pc_on, rz_on, przycisk_on, pc_pwr;
volatile uint8_t tryb = 0; // 0 - normalny, 1 - serwisowy
volatile uint8_t flag_zmiana_trybu;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USB_PCD_Init(void);
static void MX_TIM14_Init(void);

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
#define PC_ON ( HAL_GPIO_ReadPin(PC_LED_GPIO_Port, PC_LED_Pin) )
#define RZUTNIK_ON ( HAL_GPIO_ReadPin(RZUTNIK_VBUS_GPIO_Port, RZUTNIK_VBUS_Pin|RZUTNIK_DM_Pin|RZUTNIK_DP_Pin) )
#define PRZYCISK_DOWN ( HAL_GPIO_ReadPin(PRZYCISK_GPIO_Port, PRZYCISK_Pin) == 0 )

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance == TIM14)	// 20 Hz
	{
		// Parametry obslugi sygnalow i przycisku
		const uint8_t reakcja_na_sygnal_czas = 60;		// reakcja na sygnal, gdy utrzyma sie dluzej niz zadana liczba dziesi¹tych czêœci sekund (20 Hz)
		const uint8_t reakcja_na_przycisk_czas = 2;		// reakcja na przycisk, musi byc wcisniety dluzej niz 0,1 s.
		const uint8_t pc_pwr_czas = 10;					// wcisniecie przycisku PWR po zadanym czasie (20 Hz)
		const uint8_t tryb_czas_na_wcisniecia = 30;		// czas w ktorym trzeba wcisnac przycisk n razy
		const uint8_t tryb_ilosc_wcisniec_zmiana = 3;	// po ilu wcisnieciach zmieni sie tryb na serwisowy

		static uint8_t pc_on_s, pc_off_s;		// zliczanie sekund wlaczenia\wylaczenia PC i jego stan
		static uint8_t rz_on_s, rz_off_s;		// zliczanie sekund wlaczenia\wylaczenia rzutnika i jego stan
		static uint8_t przycisk_on_s;			// zliczanie sekund wcisniecia przycisku i jego stan

		// ---------- Licznik najblizszego czasu ----------
		static uint8_t licznik = 0;
		if(licznik) licznik--;
		// ----- reakcja na przycisk - filtracja i zliczanie wciœniêæ -----
		static uint8_t wcisniecia = 0;
		if(PRZYCISK_DOWN)
		{
			if(przycisk_on_s<255) przycisk_on_s++; // licznik czasu wcisniecia przycisku
			if(przycisk_on_s >= reakcja_na_przycisk_czas) // reakcja na wcisniecie przycisku, gdy wcisniety dluzej niz
			{
				przycisk_on = 1;	// Ustaw stan przycisku na 1 - wcisniety
				if(!licznik) wcisniecia = 0; // Gdy licznik doliczyl do zera wyzeruj wcisniecia
				if(!wcisniecia) licznik = tryb_czas_na_wcisniecia; // Po pierwszym wcisnieciu przycisku wyzeruj licznik - zliczaj wcisniecia z ostatnich 1,5 s
				if(przycisk_on_s == reakcja_na_przycisk_czas) // Licz wcisniecia tylko w ustalonym czasie reakcji na przycisk
				{
					wcisniecia++;
					if(wcisniecia == tryb_ilosc_wcisniec_zmiana) // Zmiana trybu po osiagnieciu ustalonej liczby wcisniec
					{
						flag_zmiana_trybu = 1;	// zmiana trybu serwisowy/normalny
						wcisniecia = 0; // wyzeruj ilosc wcisniec i licznik (kolejne 3 wcisniecia liczone beda od nowa)
						licznik = 0;
					} // Zmiana trybu
				} // Licz wcisniecia

				// Ustaw flage pc_pwr po zadanym czasie wcisniecia przycisku
				if(przycisk_on_s >= pc_pwr_czas) pc_pwr = 1;
				else pc_pwr = 0;
			} // Reakcja na wcisniety przycisk
		} // PRZYCISK_DOWN
		else // Przycisk nie wcisniety
		{
			przycisk_on = 0;
			przycisk_on_s = 0;
			pc_pwr = 0;
		}

		// ---------- reakcja na sygnal od PC i rzutnika ----------
		if(PC_ON) { // PC wlaczony
			if(pc_on_s<reakcja_na_sygnal_czas) pc_on_s++;
			else pc_on = 1;
			pc_off_s = 0;
		}
		else { // PC wylaczony
			if(pc_off_s<reakcja_na_sygnal_czas) pc_off_s++;
			else pc_on = 0;
			pc_on_s = 0;
		}
		if(RZUTNIK_ON) { // rzutnik wlaczony
			if(rz_on_s<reakcja_na_sygnal_czas) rz_on_s++;
			else rz_on = 1;
			rz_off_s = 0;
		}
		else { // rzutnik wylaczony
			if(rz_off_s<reakcja_na_sygnal_czas) rz_off_s++;
			else rz_on = 0;
			rz_on_s = 0;
		}
	} // TIM14
}

//void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
//{
//	if(GPIO_Pin == PRZYCISK_Pin)	// zdarzenie przycisku
//	{
//		if(HAL_GPIO_ReadPin(PRZYCISK_GPIO_Port, PRZYCISK_Pin) == 0)	// przycisk wcisniety
//		{
//			przycisk_flag = 1;
//		}
//	}
//}
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USB_PCD_Init();
  MX_TIM14_Init();
  /* USER CODE BEGIN 2 */
	// Testowe mrugranie diod
	for(int i = 0; i < 10; i++)
	{
		HAL_GPIO_TogglePin(LED_PC_GPIO_Port, LED_PC_Pin|LED_PWR_Pin|LED_RZUTNIK_Pin);
		HAL_Delay(250);
	}
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //watchdog
	  if(flag_zmiana_trybu) // Zmiana trybu
	  {
		  flag_zmiana_trybu = 0;
		  tryb ^= 1;
	  }

	  // Przycisk wcisniety dluzej niz 1s
	  if(pc_pwr || flag_wylaczanie_twarde) PWR_ON;
	  else if(!flag_wylaczanie_twarde) PWR_OFF;

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  }
  /* USER CODE END 3 */

}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL5;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* TIM14 init function */
static void MX_TIM14_Init(void)
{

  htim14.Instance = TIM14;
  htim14.Init.Prescaler = 10;
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim14.Init.Period = 50000;
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/* USB init function */
static void MX_USB_PCD_Init(void)
{

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PWR_GPIO_Port, USB_PWR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M_IN1_Pin|M_IN2_Pin|PC_PWR_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_PWR_Pin|LED_PC_Pin|LED_RZUTNIK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : USB_PWR_Pin */
  GPIO_InitStruct.Pin = USB_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PWR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : M_IMP_EXTI_Pin */
  GPIO_InitStruct.Pin = M_IMP_EXTI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(M_IMP_EXTI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : M_IN1_Pin M_IN2_Pin LED_PWR_Pin LED_PC_Pin 
                           LED_RZUTNIK_Pin */
  GPIO_InitStruct.Pin = M_IN1_Pin|M_IN2_Pin|LED_PWR_Pin|LED_PC_Pin 
                          |LED_RZUTNIK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PRZYCISK_Pin */
  GPIO_InitStruct.Pin = PRZYCISK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(PRZYCISK_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC_PWR_Pin */
  GPIO_InitStruct.Pin = PC_PWR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PC_PWR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PC_LED_Pin */
  GPIO_InitStruct.Pin = PC_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(PC_LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RZUTNIK_DP_Pin RZUTNIK_DM_Pin RZUTNIK_VBUS_Pin */
  GPIO_InitStruct.Pin = RZUTNIK_DP_Pin|RZUTNIK_DM_Pin|RZUTNIK_VBUS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
